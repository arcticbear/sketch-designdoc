var com = {};

com.mamuso = {
  // Configuration variables
  config: {
    guideDir: "guidelines",
    scale: "2.0",
    primary: "#333333",
    secondary: "#FFFFFF"
  },

  // Set of tools
  tools: {

    // Import MMMarkdown
    loadFramework: function(pluginRoot) {
      if (NSClassFromString('MMMarkdown') == null) {
        var mocha = [Mocha sharedRuntime]
        return [mocha loadFrameworkWithName:'MMMarkdown' inDirectory:pluginRoot]
      } else {
        return true
      }
    },

    // Find an object by name in a given scope
    findObjectsByName: function(name,scope) {
      var predicate = NSPredicate.predicateWithFormat("name == %@",name);
      return scope.filteredArrayUsingPredicate(predicate);
    },

    // Find an object by type in a given scope
    findObjectsOfType: function(classType,scope) {
      var predicate = NSPredicate.predicateWithFormat("self isKindOfClass: %@",classType);
      return scope.filteredArrayUsingPredicate(predicate);
    },

    // Get the solid color of a shape
    getColor: function(object) {
      try{
        var fills = object.style().fills();
        if (fills.count() > 0 && fills.firstObject().fillType() == 0) { 
          return "#" + fills.firstObject().color().hexValue().toString();
        }
      } catch (e) {
        return nil;
      }
    },

    // Read the settings page if present
    readSettings: function(scope) {
      var settingsPage = com.mamuso.tools.findObjectsByName("_settings", scope);
      if(settingsPage.count() == 1) {
        var page = settingsPage.firstObject(),
        layers = page.children();

        // Check if we have defined a primary color
        var primary = com.mamuso.tools.getColor(com.mamuso.tools.findObjectsByName("_primary", layers).firstObject());
        if (primary) { 
          com.mamuso.config.primary = primary;
        }

        // Check if we have defined a secondary color
        var secondary = com.mamuso.tools.getColor(com.mamuso.tools.findObjectsByName("_secondary", layers).firstObject());
        if (secondary) { 
          com.mamuso.config.secondary = secondary;
        }

        // Check if we have a logo, we will export it later
        var logo = com.mamuso.tools.findObjectsByName("_logo", layers)
        com.mamuso.config.logo = (logo.count() > 0) ? true : false;
      }
    },

    // Export images and build each individual page
    buildGuide: function(scope) {
      scope = scope.reversedArray();
      // Loop through the pages to create the initial structure
      for (var i=0; i<scope.count(); i++) {
        var page = scope[i],
        layers = page.children(),
        artboards = page.artboards().reversedArray(),
        pageHtml = "";

        // Changing page, or we will not export a damn thing
        com.mamuso.config.doc.setCurrentPage(page);

        // Special case for settings
        if(page.name() == "_settings" && com.mamuso.config.logo) {
          // export the logo
          logo = com.mamuso.tools.findObjectsByName("_logo", artboards).firstObject();
          logoFilename = com.mamuso.config.baseDir.stringByAppendingPathComponent("img/logo.png");
          com.mamuso.tools.sliceAndExport(logo, logoFilename);
        } else {

          // Ignore all pages starting with "_"
          if(!page.name().hasPrefix("_")) {

            // Page Header
            pageHtml += "<h1>" + page.name() + "</h1>";

            // Loop through the artboards of the page
            for (var j=0; j<artboards.count(); j++) {
              var artboard = artboards[j],

              // Artboard title IF doesn't start with _
              artboardTitle = artboard.name().hasPrefix("_") ? "" : artboard.name();

              // Export the image
              filename = page.name().stringByReplacingOccurrencesOfString_withString(" ", "_") + "-" + artboard.name().stringByReplacingOccurrencesOfString_withString(" ", "_") + ".png";
              filePath = com.mamuso.config.baseDir.stringByAppendingPathComponent("img").stringByAppendingPathComponent(filename);
              com.mamuso.tools.sliceAndExport(artboard, filePath);

              // Try to find the text layer
              artboardText = com.mamuso.tools.findObjectsByName(artboard.name() + "_bodytext", layers).firstObject();
              if(artboardText && artboardText.class() == "MSTextLayer"){
                artboardHtmlText = com.mamuso.tools.markdownToHTML(artboardText.stringValue());
              }
              pageHtml += com.mamuso.tools.htmlBuildArtboard(artboardTitle, artboardHtmlText, "img/" + filename);
            }

            // Let's writhe the htmls :)
            var htmlName = page.name().stringByReplacingOccurrencesOfString_withString(" ", "_") + ".html",
            htmlContent = [NSString stringWithFormat:"%@", pageHtml];
            htmlContent.writeToFile_atomically_encoding_error(com.mamuso.config.baseDir.stringByAppendingPathComponent(htmlName), NSUTF8StringEncoding, true, null);
          }
        }
      }
    },

    // Text to Markdown
    markdownToHTML: function(text) {
        var html = [MMMarkdown HTMLStringWithMarkdown:text error:null];
        return html;
    },

    // Let the user specify a directory
    getDirFromPrompt: function() {
      var panel = [NSOpenPanel openPanel];
      [panel setMessage:"ðŸŽŸ Where do you want to export the documents?"];
      [panel setCanChooseDirectories: true];
      [panel setCanChooseFiles: false];
      [panel setCanCreateDirectories: true];
      var defaultDir = com.mamuso.config.doc.fileURL().URLByDeletingLastPathComponent();
      [panel setDirectoryURL:defaultDir];

      if ([panel runModal] == NSOKButton) {
        var message = [panel filename];
        return message;
      } else {
        return null;
      }
    },

    // Make slice and export 
    sliceAndExport: function(obj, filename) {
      var rect = MSSliceTrimming.trimmedRectForSlice(obj),
      slice = MSExportRequest.requestWithRect_scale(rect, com.mamuso.config.scale);
      com.mamuso.config.doc.saveArtboardOrSlice_toFile(slice, filename);
    },

    // ---------------------------------------------------------------------
    // HTML BUILDERS
    // ---------------------------------------------------------------------
    htmlSetHeader: function() {
      html = "";
      return html;
    },

    htmlBuildPageTitle: function(title) {
      html = "<section>";
      if(title != null) {
        html += "<header><h1>";
        html += title;
        html += "</h1></header>";
      }
      html += "</section>";
      
      return html;
    },

    htmlBuildArtboard: function(title, body, img) {
      html = "<section>";
      if(title != null) {
        html += "<header><h2>";
        html += title;
        html += "</h2></header>";
      }

      if(img != null) {
        html += "<img src='" + img + "'>";
      }

      if(body != null) {
        html += "<div>" + body + "</div>";
      }

      html += "</section>";
      
      return html;
    }

  }
};